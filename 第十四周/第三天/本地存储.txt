一 本地存储
    Ⅰjs中的本地存储
    在js中会把部分信息存储在当前浏览器/某一个域的某个位置,浏览器或页面关闭时,存储的信息不会消失,以后打开页面会从上次存储信息的位置把内容获取
    本地存储实现不同页面之间的信息通讯,在A页面操作的信息可以存储在本地,访问B页面时从本地获取信息(页面跳转时url地址栏的问号传参也是实现页面之间的通信)
    谷歌下存储的信息,ie无法获取/京东在谷歌存储的信息,百度在谷歌下无法获取
    Ⅱ 本地存储的方案
    1传统:cookie+session
    cookie:把信息存储在客户端的浏览器中(但是项目服务器可以获取cookie)
    session:把信息存储在服务器上(服务器存储)
    2.html5:webStorage(localStorage|sessionStorage)
    localStorage:永久存储,可以设置过期时间
    sessionStorage:会话存储,会话窗口存在,信息存在;回话窗口关闭信息就消失
    刷新时,两者都还在;关闭再打开页面时,localStorage内容还在,sessionStorage内容消失
    F5刷新只是将DOM结构等进行重新渲染,会话没有关闭;ctrl+F5强制刷新,关闭会话,清缓存;杀毒软件/浏览器自带的清除历史记录不能把localStorage存储的内容清除
4.cookie和webStorage:
    1)两者存储的内容都可以在谷歌浏览器控制台的Resources/Application选项中查看
    2)两者都是明文存储,在使用它们作存储时,保持以下原则:避免存储重要信息(用户账号和密码,身份证号,银行卡账号,手机号..),如果需要存储,需要将存储的信息加密
   加密:不可逆转加密(如密码...最常用的是MD5[md5.js,简单的密码可通过cmd5.com进行解密])和可逆转加密(手机.银行卡号.用户名)

[cookie]
    1.兼容所有的浏览器
    2.是本地存储,不管是刷新页面还是关闭页面,存储的信息不会消失
    3.存储的大小有限制,一般同一个源下最多只能存储4KB
    4.有过期时间
    5.使用360或浏览器自带清理垃圾的功能,可以cookie清除
    6.用户可能会主动禁止cookie存储,如果无痕浏览/隐身模式...
    7.不是单纯的本地存储,它的相关操作和服务器之间有许多联系
[localStorage]
    1.不兼容ie低版本浏览器
    2.是本地会话存储,关闭页面,会话结束,浏览器会把它存储它的信息清除;如果是刷新页面,存储的信息不会消失
    3.存储内容也有大小限制,一般为5MB
    4.不存在过期时间,只要不删除会永久存储到本地
    5.安全卫士和浏览器的清除功能不能清除
    6.用户不能主动禁止
    7.单纯的本地存储,和服务器之间没有联系
5.cookie使用的语法:
[cookie]
    1)设置/修改:
        document.cookie=xxx;
        控制台显示除了key/value,还有Domain/Path/expires...
     2)获取
        document.cookie 获取,还需要把全部的信息使用正则匹配出想要的结果
    3)删除的原理:设置cookie信息存储的时间是今天以前的一个时间,cookie到期(expires)就是删除
    具体封装好的方法见cookie.js
[webStorage] localStorage|sessionStorage两者语法相同
    1)设置/修改(同源存储的key不会重复)
    localStorage.setItem([key],[value])
    存储的value是字符串格式的,如果编写的不是字符串,浏览器会默认转为字符串存储,如:
    localStorage.setItem('age',8);
    console.log(typeof (localStorage.getItem('age')));;-->string
    但是,对象是特殊情况:
    localStorage.setItem('age',{zhufeng:'珠峰'});
    console.log(localStorage.getItem('age'));--->[object Object] toString()转化为字符串方法,其他数字类型使用时转为字符串,但是,将对象的toString在Object原型上,用来检测数据类型
    所以,对象的存储方式为:
    localStorage.setItem('age',JSON.stringify({zhufeng:'珠峰'}));
    2)获取(字符串格式)
    localStorage.getItem([key])
    3)移除
    localStorage.removeItem([key])
    localStorage.clear() 把当前域所有使用localStorage存储的内容都移除
    4)根据索引index获取对应key
    localStorage.key([index])
    5)获取存储记录的条数
    localStorage.length;
    6.应用
    1)记住用户名和密码/自动登陆
    第一次登陆:获取用户输入的用户名和密码-->先服务器发送请求,把用户输入的用户名和密码(已经加密)传递给服务器(post请求)-->服务器到数据库中查看传递的信息是否存在,返回成功或失败(如果成功,返回成功状态和部分用户的信息)-->客户端接收传递回的信息
    第一次登陆成功:
        把服务器返回的部分用户信息通过cookie存储在本地,包含用户名和密码(经过加密)
    第二次打开页面
        从cookie获取用户名和密码,然后把用户名和密码分别显示在文本框;但是密码是经过加密的,需要随便在文本框中输入一部分内容,把真正的密码保存在一个变量
        如果用户没有修改密码,在点击登陆时,获取页面中的用户名和之前保存的密码(不是文本框中的密码),重新验证登陆
        如果用户修改密码,获取文本框中最新的用户名和密码,重新走第一次登陆的流程,本次更换用户密码后如果登陆成功,需要把之前存储的cookie信息进行更换
    2)注册
    3)购物车:将商品/客户端ip/用户的账号等信息存储在本地cookie/服务器的session/存数据库
    4)用户的部分信息,当用户登陆成功后会把用户的一些信息记录在本地cookie中:购物车..
    cookie:存储少量信息或需要浏览器兼容的信息
    localStorage:某一个js或css原代码(性能优化);及一些不需要经常更新的数据,存储的时候设置存储时间,以后重新刷新页面,看一下有没有超过预定事件,如果已经超过,重新获取数据;没有超过,使用本地数据(防止频繁刷新页面,减轻对服务器的压力)(高级优化技巧:二级缓存)








